# mpi = MPI with its default compiler

SHELL = /bin/sh

# ---------------------------------------------------------------------
# Compiler/linker settings
# Specify flags and libraries needed for your compiler

CC =        mpicxx
CCFLAGS =   -g -O3 -std=c++17 -D_GLIBCXX_USE_CXX11_ABI=0
SHFLAGS =   -fPIC
DEPFLAGS =  -M

LINK =      mpicxx
LINKFLAGS = -g -O3 -std=c++17
LIB =
SIZE =      size

ARCHIVE =   ar
ARFLAGS =   -rc
SHLIBFLAGS =    -shared -rdynamic
NEP_CUDA_PATH = $(CURDIR)/..

CUDA_HOME = $(CUDADIR)
# CUDA include and lib paths
CUDA_INC_PATH = $(CUDA_HOME)/include
CUDA_LIB_PATH = $(CUDA_HOME)/lib64

PYTORCH_PATH = $(shell python3 -c "import torch; print(torch.__path__[0])")
CCFLAGS += -I$(PYTORCH_PATH)/include/
CCFLAGS += -I$(PYTORCH_PATH)/include/torch/csrc/api/include/

CCFLAGS += -I../PWMLFF/NEP_GPU/force/ -I../PWMLFF/NEP_GPU/utilities/

PYTHON_LIB_PATH = $(shell python3-config --prefix)/lib
LINKFLAGS += -L$(PYTHON_LIB_PATH) -lpython3.11 -static-libstdc++ -static-libgcc
LINKFLAGS += -L$(PYTORCH_PATH)/lib/ -ltorch -lc10 -ltorch_cpu

# Check if OP_LIB_PATH is set
ifeq ($(OP_LIB_PATH),)
$(error OP_LIB_PATH is not set)
endif
CPUFLAGS = $(LINKFLAGS) -L$(OP_LIB_PATH) -lCalcOps_bind_cpu
GPUFLAGS = $(LINKFLAGS) -L$(OP_LIB_PATH) -lCalcOps_bind

# ---------------------------------------------------------------------
# LAMMPS-specific settings, all OPTIONAL
# Specify settings for LAMMPS features you will use
# If you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings
# See possible settings in Section 3.5 of the manual

LMP_INC =   -DLAMMPS_GZIP -DLAMMPS_MEMALIGN=64  # -DLAMMPS_CXX98

# MPI library
# See discussion in Section 3.4 of the manual
# MPI wrapper compiler/linker can provide this info
# Can point to dummy MPI library in src/STUBS as in Makefile.serial
# Use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC =       -DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1
MPI_PATH =
MPI_LIB =

# FFT library
# See discussion in Section 3.5.2 of manual
# Can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

FFT_INC =
FFT_PATH =
FFT_LIB =

# JPEG and/or PNG library
# See discussion in Section 3.5.4 of manual
# Only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC =
JPG_PATH =
JPG_LIB =

# Library for loading shared objects (defaults to -ldl, should be empty on Windows)
# Uncomment to change the default

# override DYN_LIB =

# ---------------------------------------------------------------------
# Conditional CUDA checks

# Check if PyTorch has CUDA version
TORCH_HAS_CUDA := $(shell python3 -c "import torch; print(torch.version.cuda is not None)")
CUDA_LIB_EXISTS := $(shell test -d $(CUDA_HOME)/lib64 && echo 1 || echo 0)

# Determine if CUDA is enabled
ifeq ($(TORCH_HAS_CUDA), True)
    ifeq ($(CUDA_LIB_EXISTS), 1)
        $(info CUDA support enabled...)
        CUDA_ENABLED = 1
    else
        $(info CUDA_HOME/lib64 not found. Disabling CUDA support...)
        CUDA_ENABLED = 0
    endif
else
    $(info PyTorch is not a CUDA version. Disabling CUDA support...)
    CUDA_ENABLED = 0
endif

# If CUDA is enabled, include CUDA-related flags and libraries
ifeq ($(CUDA_ENABLED), 1)
    CCFLAGS += -DUSE_CUDA
    CCFLAGS += -I$(NEP_CUDA_PATH)/include
    CCFLAGS += -I$(CUDA_INC_PATH)
    CCFLAGS += -I../PWMLFF/NEP_GPU/force/ -I../PWMLFF/NEP_GPU/utilities/
    LINKFLAGS += -L$(NEP_CUDA_PATH) -lnep_gpu
    LINKFLAGS += -L$(CUDA_LIB_PATH) -lcudart
    GPUFLAGS = $(LINKFLAGS) -L$(OP_LIB_PATH) -lCalcOps_bind -L$(CUDA_LIB_PATH) -lcudart
endif

# ---------------------------------------------------------------------
# Build rules and dependencies
# Do not edit this section

include Makefile.package.settings
include Makefile.package

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB) $(DYN_LIB)
EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)

# Path to src files

vpath %.cpp ..
vpath %.h ..

# Executable names
EXE = ../lmp_mpi
EXE_GPU = ../lmp_mpi_gpu

# Default target
.PHONY: mpi
mpi: $(EXE)
ifeq ($(CUDA_ENABLED), 1)
	$(MAKE) $(EXE_GPU)
endif

# Link target for CPU-only executable

$(EXE): main.o $(LMPLIB) $(EXTRA_LINK_DEPENDS)
	$(LINK) $(CPUFLAGS) main.o $(EXTRA_PATH) $(LMPLINK) $(EXTRA_LIB) $(LIB) -o $@
	$(SIZE) $@

# Only build GPU executable if CUDA is enabled
ifeq ($(CUDA_ENABLED), 1)
$(EXE_GPU): main.o $(LMPLIB) $(EXTRA_LINK_DEPENDS)
	$(LINK) $(GPUFLAGS) main.o $(EXTRA_PATH) $(LMPLINK) $(EXTRA_LIB) $(LIB) -o $@
	$(SIZE) $@
else
$(EXE_GPU):
	@echo "Skipping GPU version since CUDA is not enabled."
endif

# Library targets

$(ARLIB): $(OBJ) $(EXTRA_LINK_DEPENDS)
	@rm -f ../$(ARLIB)
	$(ARCHIVE) $(ARFLAGS) ../$(ARLIB) $(OBJ)
	@rm -f $(ARLIB)
	@ln -s ../$(ARLIB) $(ARLIB)

$(SHLIB): $(OBJ) $(EXTRA_LINK_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o ../$(SHLIB) \
		$(OBJ) $(EXTRA_LIB) $(LIB)
	@rm -f $(SHLIB)
	@ln -s ../$(SHLIB) $(SHLIB)

# Compilation rules

%.o:%.cpp
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

# Individual dependencies

depend : fastdep.exe $(SRC)
	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1

fastdep.exe: ../DEPEND/fastdep.c
	cc -O -o $@ $<

sinclude .depend

